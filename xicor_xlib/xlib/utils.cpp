#include "utils.h"

#include "X11/keysym.h"
#include "X11/keysymdef.h"

namespace xicor {
namespace xlib {
    
    static Map<std::string, KeySym> str2ks = Map<std::string, KeySym>();
    static Set<KeySym> symks = Set<KeySym>();
    static Set<KeySym> modks = Set<KeySym>();

    const Set<KeySym>& getAllSymbolic()
    {
        if (symks.empty()) {
            symks.insert(XK_exclam);
            symks.insert(XK_quotedbl);
            symks.insert(XK_numbersign);
            symks.insert(XK_dollar);
            symks.insert(XK_percent);
            symks.insert(XK_ampersand);
            symks.insert(XK_apostrophe);
            symks.insert(XK_parenleft);
            symks.insert(XK_parenright);
            symks.insert(XK_asterisk);
            symks.insert(XK_plus);
            symks.insert(XK_comma);
            symks.insert(XK_minus);
            symks.insert(XK_period);
            symks.insert(XK_slash);
            symks.insert(XK_0);
            symks.insert(XK_1);
            symks.insert(XK_2);
            symks.insert(XK_3);
            symks.insert(XK_4);
            symks.insert(XK_5);
            symks.insert(XK_6);
            symks.insert(XK_7);
            symks.insert(XK_8);
            symks.insert(XK_9);
            symks.insert(XK_colon);
            symks.insert(XK_semicolon);
            symks.insert(XK_less);
            symks.insert(XK_equal);
            symks.insert(XK_greater);
            symks.insert(XK_question);
            symks.insert(XK_at);
            symks.insert(XK_A);
            symks.insert(XK_B);
            symks.insert(XK_C);
            symks.insert(XK_D);
            symks.insert(XK_E);
            symks.insert(XK_F);
            symks.insert(XK_G);
            symks.insert(XK_H);
            symks.insert(XK_I);
            symks.insert(XK_J);
            symks.insert(XK_K);
            symks.insert(XK_L);
            symks.insert(XK_M);
            symks.insert(XK_N);
            symks.insert(XK_O);
            symks.insert(XK_P);
            symks.insert(XK_Q);
            symks.insert(XK_R);
            symks.insert(XK_S);
            symks.insert(XK_T);
            symks.insert(XK_U);
            symks.insert(XK_V);
            symks.insert(XK_W);
            symks.insert(XK_X);
            symks.insert(XK_Y);
            symks.insert(XK_Z);
            symks.insert(XK_bracketleft);
            symks.insert(XK_backslash);
            symks.insert(XK_bracketright);
            symks.insert(XK_asciicircum);
            symks.insert(XK_underscore);
            symks.insert(XK_grave);
            symks.insert(XK_a);
            symks.insert(XK_b);
            symks.insert(XK_c);
            symks.insert(XK_d);
            symks.insert(XK_e);
            symks.insert(XK_f);
            symks.insert(XK_g);
            symks.insert(XK_h);
            symks.insert(XK_i);
            symks.insert(XK_j);
            symks.insert(XK_k);
            symks.insert(XK_l);
            symks.insert(XK_m);
            symks.insert(XK_n);
            symks.insert(XK_o);
            symks.insert(XK_p);
            symks.insert(XK_q);
            symks.insert(XK_r);
            symks.insert(XK_s);
            symks.insert(XK_t);
            symks.insert(XK_u);
            symks.insert(XK_v);
            symks.insert(XK_w);
            symks.insert(XK_x);
            symks.insert(XK_y);
            symks.insert(XK_z);
            symks.insert(XK_braceleft);
            symks.insert(XK_bar);
            symks.insert(XK_braceright);
            symks.insert(XK_asciitilde);
            symks.insert(XK_nobreakspace);
            symks.insert(XK_exclamdown);
            symks.insert(XK_cent);
            symks.insert(XK_sterling);
            symks.insert(XK_currency);
            symks.insert(XK_yen);
            symks.insert(XK_brokenbar);
            symks.insert(XK_section);
            symks.insert(XK_diaeresis);
            symks.insert(XK_copyright);
            symks.insert(XK_ordfeminine);
            symks.insert(XK_guillemotleft);
            symks.insert(XK_notsign);
            symks.insert(XK_hyphen);
            symks.insert(XK_registered);
            symks.insert(XK_macron);
            symks.insert(XK_degree);
            symks.insert(XK_plusminus);
            symks.insert(XK_twosuperior);
            symks.insert(XK_threesuperior);
            symks.insert(XK_acute);
            symks.insert(XK_mu);
            symks.insert(XK_paragraph);
            symks.insert(XK_periodcentered);
            symks.insert(XK_cedilla);
            symks.insert(XK_onesuperior);
            symks.insert(XK_masculine);
            symks.insert(XK_guillemotright);
            symks.insert(XK_onequarter);
            symks.insert(XK_onehalf);
            symks.insert(XK_threequarters);
            symks.insert(XK_questiondown);
            symks.insert(XK_Agrave);
            symks.insert(XK_Aacute);
            symks.insert(XK_Acircumflex);
            symks.insert(XK_Atilde);
            symks.insert(XK_Adiaeresis);
            symks.insert(XK_Aring);
            symks.insert(XK_AE);
            symks.insert(XK_Ccedilla);
            symks.insert(XK_Egrave);
            symks.insert(XK_Eacute);
            symks.insert(XK_Ecircumflex);
            symks.insert(XK_Ediaeresis);
            symks.insert(XK_Igrave);
            symks.insert(XK_Iacute);
            symks.insert(XK_Icircumflex);
            symks.insert(XK_Idiaeresis);
            symks.insert(XK_ETH);
            symks.insert(XK_Ntilde);
            symks.insert(XK_Ograve);
            symks.insert(XK_Oacute);
            symks.insert(XK_Ocircumflex);
            symks.insert(XK_Otilde);
            symks.insert(XK_Odiaeresis);
            symks.insert(XK_multiply);
            symks.insert(XK_Oslash);
            symks.insert(XK_Ooblique);
            symks.insert(XK_Ugrave);
            symks.insert(XK_Uacute);
            symks.insert(XK_Ucircumflex);
            symks.insert(XK_Udiaeresis);
            symks.insert(XK_Yacute);
            symks.insert(XK_THORN);
            symks.insert(XK_ssharp);
            symks.insert(XK_agrave);
            symks.insert(XK_aacute);
            symks.insert(XK_acircumflex);
            symks.insert(XK_atilde);
            symks.insert(XK_adiaeresis);
            symks.insert(XK_aring);
            symks.insert(XK_ae);
            symks.insert(XK_ccedilla);
            symks.insert(XK_egrave);
            symks.insert(XK_eacute);
            symks.insert(XK_ecircumflex);
            symks.insert(XK_ediaeresis);
            symks.insert(XK_igrave);
            symks.insert(XK_iacute);
            symks.insert(XK_icircumflex);
            symks.insert(XK_idiaeresis);
            symks.insert(XK_eth);
            symks.insert(XK_ntilde);
            symks.insert(XK_ograve);
            symks.insert(XK_oacute);
            symks.insert(XK_ocircumflex);
            symks.insert(XK_otilde);
            symks.insert(XK_odiaeresis);
            symks.insert(XK_division);
            symks.insert(XK_oslash);
            symks.insert(XK_ooblique);
            symks.insert(XK_ugrave);
            symks.insert(XK_uacute);
            symks.insert(XK_ucircumflex);
            symks.insert(XK_udiaeresis);
            symks.insert(XK_yacute);
            symks.insert(XK_thorn);
            symks.insert(XK_ydiaeresis);
        }
        return symks;
    }
    
    const Set<KeySym>& getAllModifiers()
    {
        if (modks.empty()) {
            modks.insert(XK_Shift_L);
            modks.insert(XK_Shift_R);
            modks.insert(XK_Control_L);
            modks.insert(XK_Control_R);
            modks.insert(XK_Caps_Lock);
            modks.insert(XK_Shift_Lock);
            modks.insert(XK_Meta_L);
            modks.insert(XK_Meta_R);
            modks.insert(XK_Alt_L);
            modks.insert(XK_Alt_R);
            modks.insert(XK_Super_L);
            modks.insert(XK_Super_R);
            modks.insert(XK_Hyper_L);
            modks.insert(XK_Hyper_R);
        }
        return modks;
    }
    
    bool isSymbolic(KeySym ks)
    {
        return symks.find(ks) != symks.end();
    }
    
    bool isModifier(KeySym ks)
    {
        return modks.find(ks) != modks.end();
    }
    
    KeySym stringToKeysym(const std::string& str)
    {
        if (str2ks.empty()) {
            str2ks["XK_BackSpace"] = XK_BackSpace;
            str2ks["XK_Tab"] = XK_Tab;
            str2ks["XK_Linefeed"] = XK_Linefeed;
            str2ks["XK_Clear"] = XK_Clear;
            str2ks["XK_Return"] = XK_Return;
            str2ks["XK_Pause"] = XK_Pause;
            str2ks["XK_Scroll_Lock"] = XK_Scroll_Lock;
            str2ks["XK_Sys_Req"] = XK_Sys_Req;
            str2ks["XK_Escape"] = XK_Escape;
            str2ks["XK_Delete"] = XK_Delete;
            str2ks["XK_Multi_key"] = XK_Multi_key;
            str2ks["XK_Codeinput"] = XK_Codeinput;
            str2ks["XK_SingleCandidate"] = XK_SingleCandidate;
            str2ks["XK_MultipleCandidate"] = XK_MultipleCandidate;
            str2ks["XK_PreviousCandidate"] = XK_PreviousCandidate;
            str2ks["XK_Home"] = XK_Home;
            str2ks["XK_Left"] = XK_Left;
            str2ks["XK_Up"] = XK_Up;
            str2ks["XK_Right"] = XK_Right;
            str2ks["XK_Down"] = XK_Down;
            str2ks["XK_Prior"] = XK_Prior;
            str2ks["XK_Page_Up"] = XK_Page_Up;
            str2ks["XK_Next"] = XK_Next;
            str2ks["XK_Page_Down"] = XK_Page_Down;
            str2ks["XK_End"] = XK_End;
            str2ks["XK_Begin"] = XK_Begin;
            str2ks["XK_Select"] = XK_Select;
            str2ks["XK_Print"] = XK_Print;
            str2ks["XK_Execute"] = XK_Execute;
            str2ks["XK_Insert"] = XK_Insert;
            str2ks["XK_Undo"] = XK_Undo;
            str2ks["XK_Redo"] = XK_Redo;
            str2ks["XK_Menu"] = XK_Menu;
            str2ks["XK_Find"] = XK_Find;
            str2ks["XK_Cancel"] = XK_Cancel;
            str2ks["XK_Help"] = XK_Help;
            str2ks["XK_Break"] = XK_Break;
            str2ks["XK_Mode_switch"] = XK_Mode_switch;
            str2ks["XK_script_switch"] = XK_script_switch;
            str2ks["XK_Num_Lock"] = XK_Num_Lock;
            str2ks["XK_KP_Space"] = XK_KP_Space;
            str2ks["XK_KP_Tab"] = XK_KP_Tab;
            str2ks["XK_KP_Enter"] = XK_KP_Enter;
            str2ks["XK_KP_F1"] = XK_KP_F1;
            str2ks["XK_KP_F2"] = XK_KP_F2;
            str2ks["XK_KP_F3"] = XK_KP_F3;
            str2ks["XK_KP_F4"] = XK_KP_F4;
            str2ks["XK_KP_Home"] = XK_KP_Home;
            str2ks["XK_KP_Left"] = XK_KP_Left;
            str2ks["XK_KP_Up"] = XK_KP_Up;
            str2ks["XK_KP_Right"] = XK_KP_Right;
            str2ks["XK_KP_Down"] = XK_KP_Down;
            str2ks["XK_KP_Prior"] = XK_KP_Prior;
            str2ks["XK_KP_Page_Up"] = XK_KP_Page_Up;
            str2ks["XK_KP_Next"] = XK_KP_Next;
            str2ks["XK_KP_Page_Down"] = XK_KP_Page_Down;
            str2ks["XK_KP_End"] = XK_KP_End;
            str2ks["XK_KP_Begin"] = XK_KP_Begin;
            str2ks["XK_KP_Insert"] = XK_KP_Insert;
            str2ks["XK_KP_Delete"] = XK_KP_Delete;
            str2ks["XK_KP_Equal"] = XK_KP_Equal;
            str2ks["XK_KP_Multiply"] = XK_KP_Multiply;
            str2ks["XK_KP_Add"] = XK_KP_Add;
            str2ks["XK_KP_Separator"] = XK_KP_Separator;
            str2ks["XK_KP_Subtract"] = XK_KP_Subtract;
            str2ks["XK_KP_Decimal"] = XK_KP_Decimal;
            str2ks["XK_KP_Divide"] = XK_KP_Divide;
            str2ks["XK_KP_0"] = XK_KP_0;
            str2ks["XK_KP_1"] = XK_KP_1;
            str2ks["XK_KP_2"] = XK_KP_2;
            str2ks["XK_KP_3"] = XK_KP_3;
            str2ks["XK_KP_4"] = XK_KP_4;
            str2ks["XK_KP_5"] = XK_KP_5;
            str2ks["XK_KP_6"] = XK_KP_6;
            str2ks["XK_KP_7"] = XK_KP_7;
            str2ks["XK_KP_8"] = XK_KP_8;
            str2ks["XK_KP_9"] = XK_KP_9;
            str2ks["XK_F1"] = XK_F1;
            str2ks["XK_F2"] = XK_F2;
            str2ks["XK_F3"] = XK_F3;
            str2ks["XK_F4"] = XK_F4;
            str2ks["XK_F5"] = XK_F5;
            str2ks["XK_F6"] = XK_F6;
            str2ks["XK_F7"] = XK_F7;
            str2ks["XK_F8"] = XK_F8;
            str2ks["XK_F9"] = XK_F9;
            str2ks["XK_F10"] = XK_F10;
            str2ks["XK_F11"] = XK_F11;
            str2ks["XK_L1"] = XK_L1;
            str2ks["XK_F12"] = XK_F12;
            str2ks["XK_L2"] = XK_L2;
            str2ks["XK_F13"] = XK_F13;
            str2ks["XK_L3"] = XK_L3;
            str2ks["XK_F14"] = XK_F14;
            str2ks["XK_L4"] = XK_L4;
            str2ks["XK_F15"] = XK_F15;
            str2ks["XK_L5"] = XK_L5;
            str2ks["XK_F16"] = XK_F16;
            str2ks["XK_L6"] = XK_L6;
            str2ks["XK_F17"] = XK_F17;
            str2ks["XK_L7"] = XK_L7;
            str2ks["XK_F18"] = XK_F18;
            str2ks["XK_L8"] = XK_L8;
            str2ks["XK_F19"] = XK_F19;
            str2ks["XK_L9"] = XK_L9;
            str2ks["XK_F20"] = XK_F20;
            str2ks["XK_L10"] = XK_L10;
            str2ks["XK_F21"] = XK_F21;
            str2ks["XK_R1"] = XK_R1;
            str2ks["XK_F22"] = XK_F22;
            str2ks["XK_R2"] = XK_R2;
            str2ks["XK_F23"] = XK_F23;
            str2ks["XK_R3"] = XK_R3;
            str2ks["XK_F24"] = XK_F24;
            str2ks["XK_R4"] = XK_R4;
            str2ks["XK_F25"] = XK_F25;
            str2ks["XK_R5"] = XK_R5;
            str2ks["XK_F26"] = XK_F26;
            str2ks["XK_R6"] = XK_R6;
            str2ks["XK_F27"] = XK_F27;
            str2ks["XK_R7"] = XK_R7;
            str2ks["XK_F28"] = XK_F28;
            str2ks["XK_R8"] = XK_R8;
            str2ks["XK_F29"] = XK_F29;
            str2ks["XK_R9"] = XK_R9;
            str2ks["XK_F30"] = XK_F30;
            str2ks["XK_R10"] = XK_R10;
            str2ks["XK_F31"] = XK_F31;
            str2ks["XK_R11"] = XK_R11;
            str2ks["XK_F32"] = XK_F32;
            str2ks["XK_R12"] = XK_R12;
            str2ks["XK_F33"] = XK_F33;
            str2ks["XK_R13"] = XK_R13;
            str2ks["XK_F34"] = XK_F34;
            str2ks["XK_R14"] = XK_R14;
            str2ks["XK_F35"] = XK_F35;
            str2ks["XK_R15"] = XK_R15;
            str2ks["XK_Shift_L"] = XK_Shift_L;
            str2ks["XK_Shift_R"] = XK_Shift_R;
            str2ks["XK_Control_L"] = XK_Control_L;
            str2ks["XK_Control_R"] = XK_Control_R;
            str2ks["XK_Caps_Lock"] = XK_Caps_Lock;
            str2ks["XK_Shift_Lock"] = XK_Shift_Lock;
            str2ks["XK_Meta_L"] = XK_Meta_L;
            str2ks["XK_Meta_R"] = XK_Meta_R;
            str2ks["XK_Alt_L"] = XK_Alt_L;
            str2ks["XK_Alt_R"] = XK_Alt_R;
            str2ks["XK_Super_L"] = XK_Super_L;
            str2ks["XK_Super_R"] = XK_Super_R;
            str2ks["XK_Hyper_L"] = XK_Hyper_L;
            str2ks["XK_Hyper_R"] = XK_Hyper_R;
            str2ks["XK_ISO_Lock"] = XK_ISO_Lock;
            str2ks["XK_ISO_Level2_Latch"] = XK_ISO_Level2_Latch;
            str2ks["XK_ISO_Level3_Shift"] = XK_ISO_Level3_Shift;
            str2ks["XK_ISO_Level3_Latch"] = XK_ISO_Level3_Latch;
            str2ks["XK_ISO_Level3_Lock"] = XK_ISO_Level3_Lock;
            str2ks["XK_ISO_Group_Shift"] = XK_ISO_Group_Shift;
            str2ks["XK_ISO_Group_Latch"] = XK_ISO_Group_Latch;
            str2ks["XK_ISO_Group_Lock"] = XK_ISO_Group_Lock;
            str2ks["XK_ISO_Next_Group"] = XK_ISO_Next_Group;
            str2ks["XK_ISO_Next_Group_Lock"] = XK_ISO_Next_Group_Lock;
            str2ks["XK_ISO_Prev_Group"] = XK_ISO_Prev_Group;
            str2ks["XK_ISO_Prev_Group_Lock"] = XK_ISO_Prev_Group_Lock;
            str2ks["XK_ISO_First_Group"] = XK_ISO_First_Group;
            str2ks["XK_ISO_First_Group_Lock"] = XK_ISO_First_Group_Lock;
            str2ks["XK_ISO_Last_Group"] = XK_ISO_Last_Group;
            str2ks["XK_ISO_Last_Group_Lock"] = XK_ISO_Last_Group_Lock;
            str2ks["XK_ISO_Left_Tab"] = XK_ISO_Left_Tab;
            str2ks["XK_ISO_Move_Line_Up"] = XK_ISO_Move_Line_Up;
            str2ks["XK_ISO_Move_Line_Down"] = XK_ISO_Move_Line_Down;
            str2ks["XK_ISO_Partial_Line_Up"] = XK_ISO_Partial_Line_Up;
            str2ks["XK_ISO_Partial_Line_Down"] = XK_ISO_Partial_Line_Down;
            str2ks["XK_ISO_Partial_Space_Left"] = XK_ISO_Partial_Space_Left;
            str2ks["XK_ISO_Partial_Space_Right"] = XK_ISO_Partial_Space_Right;
            str2ks["XK_ISO_Set_Margin_Left"] = XK_ISO_Set_Margin_Left;
            str2ks["XK_ISO_Set_Margin_Right"] = XK_ISO_Set_Margin_Right;
            str2ks["XK_ISO_Release_Margin_Left"] = XK_ISO_Release_Margin_Left;
            str2ks["XK_ISO_Release_Margin_Right"] = XK_ISO_Release_Margin_Right;
            str2ks["XK_ISO_Release_Both_Margins"] = XK_ISO_Release_Both_Margins;
            str2ks["XK_ISO_Fast_Cursor_Left"] = XK_ISO_Fast_Cursor_Left;
            str2ks["XK_ISO_Fast_Cursor_Right"] = XK_ISO_Fast_Cursor_Right;
            str2ks["XK_ISO_Fast_Cursor_Up"] = XK_ISO_Fast_Cursor_Up;
            str2ks["XK_ISO_Fast_Cursor_Down"] = XK_ISO_Fast_Cursor_Down;
            str2ks["XK_ISO_Continuous_Underline"] = XK_ISO_Continuous_Underline;
            str2ks["XK_ISO_Discontinuous_Underline"] = XK_ISO_Discontinuous_Underline;
            str2ks["XK_ISO_Emphasize"] = XK_ISO_Emphasize;
            str2ks["XK_ISO_Center_Object"] = XK_ISO_Center_Object;
            str2ks["XK_ISO_Enter"] = XK_ISO_Enter;
            str2ks["XK_space"] = XK_space;
            str2ks["XK_exclam"] = XK_exclam;
            str2ks["XK_quotedbl"] = XK_quotedbl;
            str2ks["XK_numbersign"] = XK_numbersign;
            str2ks["XK_dollar"] = XK_dollar;
            str2ks["XK_percent"] = XK_percent;
            str2ks["XK_ampersand"] = XK_ampersand;
            str2ks["XK_apostrophe"] = XK_apostrophe;
            str2ks["XK_parenleft"] = XK_parenleft;
            str2ks["XK_parenright"] = XK_parenright;
            str2ks["XK_asterisk"] = XK_asterisk;
            str2ks["XK_plus"] = XK_plus;
            str2ks["XK_comma"] = XK_comma;
            str2ks["XK_minus"] = XK_minus;
            str2ks["XK_period"] = XK_period;
            str2ks["XK_slash"] = XK_slash;
            str2ks["XK_0"] = XK_0;
            str2ks["XK_1"] = XK_1;
            str2ks["XK_2"] = XK_2;
            str2ks["XK_3"] = XK_3;
            str2ks["XK_4"] = XK_4;
            str2ks["XK_5"] = XK_5;
            str2ks["XK_6"] = XK_6;
            str2ks["XK_7"] = XK_7;
            str2ks["XK_8"] = XK_8;
            str2ks["XK_9"] = XK_9;
            str2ks["XK_colon"] = XK_colon;
            str2ks["XK_semicolon"] = XK_semicolon;
            str2ks["XK_less"] = XK_less;
            str2ks["XK_equal"] = XK_equal;
            str2ks["XK_greater"] = XK_greater;
            str2ks["XK_question"] = XK_question;
            str2ks["XK_at"] = XK_at;
            str2ks["XK_A"] = XK_A;
            str2ks["XK_B"] = XK_B;
            str2ks["XK_C"] = XK_C;
            str2ks["XK_D"] = XK_D;
            str2ks["XK_E"] = XK_E;
            str2ks["XK_F"] = XK_F;
            str2ks["XK_G"] = XK_G;
            str2ks["XK_H"] = XK_H;
            str2ks["XK_I"] = XK_I;
            str2ks["XK_J"] = XK_J;
            str2ks["XK_K"] = XK_K;
            str2ks["XK_L"] = XK_L;
            str2ks["XK_M"] = XK_M;
            str2ks["XK_N"] = XK_N;
            str2ks["XK_O"] = XK_O;
            str2ks["XK_P"] = XK_P;
            str2ks["XK_Q"] = XK_Q;
            str2ks["XK_R"] = XK_R;
            str2ks["XK_S"] = XK_S;
            str2ks["XK_T"] = XK_T;
            str2ks["XK_U"] = XK_U;
            str2ks["XK_V"] = XK_V;
            str2ks["XK_W"] = XK_W;
            str2ks["XK_X"] = XK_X;
            str2ks["XK_Y"] = XK_Y;
            str2ks["XK_Z"] = XK_Z;
            str2ks["XK_bracketleft"] = XK_bracketleft;
            str2ks["XK_backslash"] = XK_backslash;
            str2ks["XK_bracketright"] = XK_bracketright;
            str2ks["XK_asciicircum"] = XK_asciicircum;
            str2ks["XK_underscore"] = XK_underscore;
            str2ks["XK_grave"] = XK_grave;
            str2ks["XK_a"] = XK_a;
            str2ks["XK_b"] = XK_b;
            str2ks["XK_c"] = XK_c;
            str2ks["XK_d"] = XK_d;
            str2ks["XK_e"] = XK_e;
            str2ks["XK_f"] = XK_f;
            str2ks["XK_g"] = XK_g;
            str2ks["XK_h"] = XK_h;
            str2ks["XK_i"] = XK_i;
            str2ks["XK_j"] = XK_j;
            str2ks["XK_k"] = XK_k;
            str2ks["XK_l"] = XK_l;
            str2ks["XK_m"] = XK_m;
            str2ks["XK_n"] = XK_n;
            str2ks["XK_o"] = XK_o;
            str2ks["XK_p"] = XK_p;
            str2ks["XK_q"] = XK_q;
            str2ks["XK_r"] = XK_r;
            str2ks["XK_s"] = XK_s;
            str2ks["XK_t"] = XK_t;
            str2ks["XK_u"] = XK_u;
            str2ks["XK_v"] = XK_v;
            str2ks["XK_w"] = XK_w;
            str2ks["XK_x"] = XK_x;
            str2ks["XK_y"] = XK_y;
            str2ks["XK_z"] = XK_z;
            str2ks["XK_braceleft"] = XK_braceleft;
            str2ks["XK_bar"] = XK_bar;
            str2ks["XK_braceright"] = XK_braceright;
            str2ks["XK_asciitilde"] = XK_asciitilde;
            str2ks["XK_nobreakspace"] = XK_nobreakspace;
            str2ks["XK_exclamdown"] = XK_exclamdown;
            str2ks["XK_cent"] = XK_cent;
            str2ks["XK_sterling"] = XK_sterling;
            str2ks["XK_currency"] = XK_currency;
            str2ks["XK_yen"] = XK_yen;
            str2ks["XK_brokenbar"] = XK_brokenbar;
            str2ks["XK_section"] = XK_section;
            str2ks["XK_diaeresis"] = XK_diaeresis;
            str2ks["XK_copyright"] = XK_copyright;
            str2ks["XK_ordfeminine"] = XK_ordfeminine;
            str2ks["XK_guillemotleft"] = XK_guillemotleft;
            str2ks["XK_notsign"] = XK_notsign;
            str2ks["XK_hyphen"] = XK_hyphen;
            str2ks["XK_registered"] = XK_registered;
            str2ks["XK_macron"] = XK_macron;
            str2ks["XK_degree"] = XK_degree;
            str2ks["XK_plusminus"] = XK_plusminus;
            str2ks["XK_twosuperior"] = XK_twosuperior;
            str2ks["XK_threesuperior"] = XK_threesuperior;
            str2ks["XK_acute"] = XK_acute;
            str2ks["XK_mu"] = XK_mu;
            str2ks["XK_paragraph"] = XK_paragraph;
            str2ks["XK_periodcentered"] = XK_periodcentered;
            str2ks["XK_cedilla"] = XK_cedilla;
            str2ks["XK_onesuperior"] = XK_onesuperior;
            str2ks["XK_masculine"] = XK_masculine;
            str2ks["XK_guillemotright"] = XK_guillemotright;
            str2ks["XK_onequarter"] = XK_onequarter;
            str2ks["XK_onehalf"] = XK_onehalf;
            str2ks["XK_threequarters"] = XK_threequarters;
            str2ks["XK_questiondown"] = XK_questiondown;
            str2ks["XK_Agrave"] = XK_Agrave;
            str2ks["XK_Aacute"] = XK_Aacute;
            str2ks["XK_Acircumflex"] = XK_Acircumflex;
            str2ks["XK_Atilde"] = XK_Atilde;
            str2ks["XK_Adiaeresis"] = XK_Adiaeresis;
            str2ks["XK_Aring"] = XK_Aring;
            str2ks["XK_AE"] = XK_AE;
            str2ks["XK_Ccedilla"] = XK_Ccedilla;
            str2ks["XK_Egrave"] = XK_Egrave;
            str2ks["XK_Eacute"] = XK_Eacute;
            str2ks["XK_Ecircumflex"] = XK_Ecircumflex;
            str2ks["XK_Ediaeresis"] = XK_Ediaeresis;
            str2ks["XK_Igrave"] = XK_Igrave;
            str2ks["XK_Iacute"] = XK_Iacute;
            str2ks["XK_Icircumflex"] = XK_Icircumflex;
            str2ks["XK_Idiaeresis"] = XK_Idiaeresis;
            str2ks["XK_ETH"] = XK_ETH;
            str2ks["XK_Ntilde"] = XK_Ntilde;
            str2ks["XK_Ograve"] = XK_Ograve;
            str2ks["XK_Oacute"] = XK_Oacute;
            str2ks["XK_Ocircumflex"] = XK_Ocircumflex;
            str2ks["XK_Otilde"] = XK_Otilde;
            str2ks["XK_Odiaeresis"] = XK_Odiaeresis;
            str2ks["XK_multiply"] = XK_multiply;
            str2ks["XK_Oslash"] = XK_Oslash;
            str2ks["XK_Ooblique"] = XK_Ooblique;
            str2ks["XK_Ugrave"] = XK_Ugrave;
            str2ks["XK_Uacute"] = XK_Uacute;
            str2ks["XK_Ucircumflex"] = XK_Ucircumflex;
            str2ks["XK_Udiaeresis"] = XK_Udiaeresis;
            str2ks["XK_Yacute"] = XK_Yacute;
            str2ks["XK_THORN"] = XK_THORN;
            str2ks["XK_ssharp"] = XK_ssharp;
            str2ks["XK_agrave"] = XK_agrave;
            str2ks["XK_aacute"] = XK_aacute;
            str2ks["XK_acircumflex"] = XK_acircumflex;
            str2ks["XK_atilde"] = XK_atilde;
            str2ks["XK_adiaeresis"] = XK_adiaeresis;
            str2ks["XK_aring"] = XK_aring;
            str2ks["XK_ae"] = XK_ae;
            str2ks["XK_ccedilla"] = XK_ccedilla;
            str2ks["XK_egrave"] = XK_egrave;
            str2ks["XK_eacute"] = XK_eacute;
            str2ks["XK_ecircumflex"] = XK_ecircumflex;
            str2ks["XK_ediaeresis"] = XK_ediaeresis;
            str2ks["XK_igrave"] = XK_igrave;
            str2ks["XK_iacute"] = XK_iacute;
            str2ks["XK_icircumflex"] = XK_icircumflex;
            str2ks["XK_idiaeresis"] = XK_idiaeresis;
            str2ks["XK_eth"] = XK_eth;
            str2ks["XK_ntilde"] = XK_ntilde;
            str2ks["XK_ograve"] = XK_ograve;
            str2ks["XK_oacute"] = XK_oacute;
            str2ks["XK_ocircumflex"] = XK_ocircumflex;
            str2ks["XK_otilde"] = XK_otilde;
            str2ks["XK_odiaeresis"] = XK_odiaeresis;
            str2ks["XK_division"] = XK_division;
            str2ks["XK_oslash"] = XK_oslash;
            str2ks["XK_ooblique"] = XK_ooblique;
            str2ks["XK_ugrave"] = XK_ugrave;
            str2ks["XK_uacute"] = XK_uacute;
            str2ks["XK_ucircumflex"] = XK_ucircumflex;
            str2ks["XK_udiaeresis"] = XK_udiaeresis;
            str2ks["XK_yacute"] = XK_yacute;
            str2ks["XK_thorn"] = XK_thorn;
            str2ks["XK_ydiaeresis"] = XK_ydiaeresis;
        }
        return str2ks.tryKey(str);
    }

} //namespace xlib
} //namespace xicor
